// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=order_getter_mock.go -package=getorder -mock_names OrderGetter=GetOrderMock
//

// Package getorder is a generated GoMock package.
package getorder

import (
	context "context"
	reflect "reflect"

	entities "github.com/smgladkovskiy/warehouse-task/internal/service/entities"
	queryoptions "github.com/smgladkovskiy/warehouse-task/internal/service/entities/query_options"
	gomock "go.uber.org/mock/gomock"
)

// GetOrderMock is a mock of OrderGetter interface.
type GetOrderMock struct {
	ctrl     *gomock.Controller
	recorder *GetOrderMockMockRecorder
}

// GetOrderMockMockRecorder is the mock recorder for GetOrderMock.
type GetOrderMockMockRecorder struct {
	mock *GetOrderMock
}

// NewGetOrderMock creates a new mock instance.
func NewGetOrderMock(ctrl *gomock.Controller) *GetOrderMock {
	mock := &GetOrderMock{ctrl: ctrl}
	mock.recorder = &GetOrderMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GetOrderMock) EXPECT() *GetOrderMockMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *GetOrderMock) GetOrder(ctx context.Context, qos queryoptions.OrderQueryOptionable) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, qos)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *GetOrderMockMockRecorder) GetOrder(ctx, qos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*GetOrderMock)(nil).GetOrder), ctx, qos)
}
