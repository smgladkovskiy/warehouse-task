// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=stocks_getter_mock.go -package=getstocks -mock_names StocksGetter=GetStocksMock
//

// Package getstocks is a generated GoMock package.
package getstocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/smgladkovskiy/warehouse-task/internal/service/entities"
	queryoptions "github.com/smgladkovskiy/warehouse-task/internal/service/entities/query_options"
	gomock "go.uber.org/mock/gomock"
)

// GetStocksMock is a mock of StocksGetter interface.
type GetStocksMock struct {
	ctrl     *gomock.Controller
	recorder *GetStocksMockMockRecorder
}

// GetStocksMockMockRecorder is the mock recorder for GetStocksMock.
type GetStocksMockMockRecorder struct {
	mock *GetStocksMock
}

// NewGetStocksMock creates a new mock instance.
func NewGetStocksMock(ctrl *gomock.Controller) *GetStocksMock {
	mock := &GetStocksMock{ctrl: ctrl}
	mock.recorder = &GetStocksMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GetStocksMock) EXPECT() *GetStocksMockMockRecorder {
	return m.recorder
}

// GetStocks mocks base method.
func (m *GetStocksMock) GetStocks(ctx context.Context, qos queryoptions.StockQueryOptionable) (entities.Stocks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStocks", ctx, qos)
	ret0, _ := ret[0].(entities.Stocks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStocks indicates an expected call of GetStocks.
func (mr *GetStocksMockMockRecorder) GetStocks(ctx, qos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStocks", reflect.TypeOf((*GetStocksMock)(nil).GetStocks), ctx, qos)
}
