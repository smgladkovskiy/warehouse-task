// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=product_getter_mock.go -package=getproduct -mock_names ProductGetter=GetProductMock
//

// Package getproduct is a generated GoMock package.
package getproduct

import (
	context "context"
	reflect "reflect"

	entities "github.com/smgladkovskiy/warehouse-task/internal/service/entities"
	queryoptions "github.com/smgladkovskiy/warehouse-task/internal/service/entities/query_options"
	gomock "go.uber.org/mock/gomock"
)

// GetProductMock is a mock of ProductGetter interface.
type GetProductMock struct {
	ctrl     *gomock.Controller
	recorder *GetProductMockMockRecorder
}

// GetProductMockMockRecorder is the mock recorder for GetProductMock.
type GetProductMockMockRecorder struct {
	mock *GetProductMock
}

// NewGetProductMock creates a new mock instance.
func NewGetProductMock(ctrl *gomock.Controller) *GetProductMock {
	mock := &GetProductMock{ctrl: ctrl}
	mock.recorder = &GetProductMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GetProductMock) EXPECT() *GetProductMockMockRecorder {
	return m.recorder
}

// GetProduct mocks base method.
func (m *GetProductMock) GetProduct(ctx context.Context, qos queryoptions.ProductQueryOptionable) (*entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, qos)
	ret0, _ := ret[0].(*entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *GetProductMockMockRecorder) GetProduct(ctx, qos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*GetProductMock)(nil).GetProduct), ctx, qos)
}
