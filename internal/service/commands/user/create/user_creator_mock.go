// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=user_creator_mock.go -package=createuser -mock_names UserCreator=CreateUserMock
//

// Package createuser is a generated GoMock package.
package createuser

import (
	context "context"
	reflect "reflect"

	entities "github.com/smgladkovskiy/warehouse-task/internal/service/entities"
	gomock "go.uber.org/mock/gomock"
)

// CreateUserMock is a mock of UserCreator interface.
type CreateUserMock struct {
	ctrl     *gomock.Controller
	recorder *CreateUserMockMockRecorder
}

// CreateUserMockMockRecorder is the mock recorder for CreateUserMock.
type CreateUserMockMockRecorder struct {
	mock *CreateUserMock
}

// NewCreateUserMock creates a new mock instance.
func NewCreateUserMock(ctrl *gomock.Controller) *CreateUserMock {
	mock := &CreateUserMock{ctrl: ctrl}
	mock.recorder = &CreateUserMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CreateUserMock) EXPECT() *CreateUserMockMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *CreateUserMock) CreateUser(ctx context.Context, user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *CreateUserMockMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*CreateUserMock)(nil).CreateUser), ctx, user)
}
