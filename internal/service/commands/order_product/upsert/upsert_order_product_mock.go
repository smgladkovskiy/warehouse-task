// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=upsert_order_product_mock.go -package=upsertorderproduct -mock_names OrderProductUpserter=UpsertOrderProductMock
//

// Package upsertorderproduct is a generated GoMock package.
package upsertorderproduct

import (
	context "context"
	reflect "reflect"

	entities "github.com/smgladkovskiy/warehouse-task/internal/service/entities"
	gomock "go.uber.org/mock/gomock"
)

// UpsertOrderProductMock is a mock of OrderProductUpserter interface.
type UpsertOrderProductMock struct {
	ctrl     *gomock.Controller
	recorder *UpsertOrderProductMockMockRecorder
}

// UpsertOrderProductMockMockRecorder is the mock recorder for UpsertOrderProductMock.
type UpsertOrderProductMockMockRecorder struct {
	mock *UpsertOrderProductMock
}

// NewUpsertOrderProductMock creates a new mock instance.
func NewUpsertOrderProductMock(ctrl *gomock.Controller) *UpsertOrderProductMock {
	mock := &UpsertOrderProductMock{ctrl: ctrl}
	mock.recorder = &UpsertOrderProductMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UpsertOrderProductMock) EXPECT() *UpsertOrderProductMockMockRecorder {
	return m.recorder
}

// UpsertOrderProduct mocks base method.
func (m *UpsertOrderProductMock) UpsertOrderProduct(ctx context.Context, orderProduct *entities.OrderProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrderProduct", ctx, orderProduct)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOrderProduct indicates an expected call of UpsertOrderProduct.
func (mr *UpsertOrderProductMockMockRecorder) UpsertOrderProduct(ctx, orderProduct any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrderProduct", reflect.TypeOf((*UpsertOrderProductMock)(nil).UpsertOrderProduct), ctx, orderProduct)
}
