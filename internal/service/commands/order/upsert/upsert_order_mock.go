// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=upsert_order_mock.go -package=upsertorder -mock_names OrderUpserter=UpsertOrderMock
//

// Package upsertorder is a generated GoMock package.
package upsertorder

import (
	context "context"
	reflect "reflect"

	entities "github.com/smgladkovskiy/warehouse-task/internal/service/entities"
	gomock "go.uber.org/mock/gomock"
)

// UpsertOrderMock is a mock of OrderUpserter interface.
type UpsertOrderMock struct {
	ctrl     *gomock.Controller
	recorder *UpsertOrderMockMockRecorder
}

// UpsertOrderMockMockRecorder is the mock recorder for UpsertOrderMock.
type UpsertOrderMockMockRecorder struct {
	mock *UpsertOrderMock
}

// NewUpsertOrderMock creates a new mock instance.
func NewUpsertOrderMock(ctrl *gomock.Controller) *UpsertOrderMock {
	mock := &UpsertOrderMock{ctrl: ctrl}
	mock.recorder = &UpsertOrderMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UpsertOrderMock) EXPECT() *UpsertOrderMockMockRecorder {
	return m.recorder
}

// UpsertOrder mocks base method.
func (m *UpsertOrderMock) UpsertOrder(ctx context.Context, order *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOrder indicates an expected call of UpsertOrder.
func (mr *UpsertOrderMockMockRecorder) UpsertOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrder", reflect.TypeOf((*UpsertOrderMock)(nil).UpsertOrder), ctx, order)
}
