// Code generated by MockGen. DO NOT EDIT.
// Source: wrapper.go
//
// Generated by this command:
//
//	mockgen -source=wrapper.go -destination=./wrapper_mock.go -package=log -mock_names WithLoggerable=WrapperMock
//

// Package log is a generated GoMock package.
package log

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// WrapperMock is a mock of WithLoggerable interface.
type WrapperMock struct {
	ctrl     *gomock.Controller
	recorder *WrapperMockMockRecorder
}

// WrapperMockMockRecorder is the mock recorder for WrapperMock.
type WrapperMockMockRecorder struct {
	mock *WrapperMock
}

// NewWrapperMock creates a new mock instance.
func NewWrapperMock(ctrl *gomock.Controller) *WrapperMock {
	mock := &WrapperMock{ctrl: ctrl}
	mock.recorder = &WrapperMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *WrapperMock) EXPECT() *WrapperMockMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *WrapperMock) Debug(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *WrapperMockMockRecorder) Debug(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*WrapperMock)(nil).Debug), varargs...)
}

// Debugf mocks base method.
func (m *WrapperMock) Debugf(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *WrapperMockMockRecorder) Debugf(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*WrapperMock)(nil).Debugf), varargs...)
}

// Error mocks base method.
func (m *WrapperMock) Error(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *WrapperMockMockRecorder) Error(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*WrapperMock)(nil).Error), varargs...)
}

// Errorf mocks base method.
func (m *WrapperMock) Errorf(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *WrapperMockMockRecorder) Errorf(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*WrapperMock)(nil).Errorf), varargs...)
}

// Fatal mocks base method.
func (m *WrapperMock) Fatal(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *WrapperMockMockRecorder) Fatal(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*WrapperMock)(nil).Fatal), varargs...)
}

// Fatalf mocks base method.
func (m *WrapperMock) Fatalf(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *WrapperMockMockRecorder) Fatalf(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*WrapperMock)(nil).Fatalf), varargs...)
}

// Info mocks base method.
func (m *WrapperMock) Info(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *WrapperMockMockRecorder) Info(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*WrapperMock)(nil).Info), varargs...)
}

// Infof mocks base method.
func (m *WrapperMock) Infof(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *WrapperMockMockRecorder) Infof(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*WrapperMock)(nil).Infof), varargs...)
}

// Named mocks base method.
func (m *WrapperMock) Named(arg0 string) Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Named", arg0)
	ret0, _ := ret[0].(Logger)
	return ret0
}

// Named indicates an expected call of Named.
func (mr *WrapperMockMockRecorder) Named(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Named", reflect.TypeOf((*WrapperMock)(nil).Named), arg0)
}

// Panic mocks base method.
func (m *WrapperMock) Panic(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic.
func (mr *WrapperMockMockRecorder) Panic(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*WrapperMock)(nil).Panic), varargs...)
}

// Panicf mocks base method.
func (m *WrapperMock) Panicf(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicf", varargs...)
}

// Panicf indicates an expected call of Panicf.
func (mr *WrapperMockMockRecorder) Panicf(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicf", reflect.TypeOf((*WrapperMock)(nil).Panicf), varargs...)
}

// Set mocks base method.
func (m *WrapperMock) Set(arg0 ...Field) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Set", varargs...)
}

// Set indicates an expected call of Set.
func (mr *WrapperMockMockRecorder) Set(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*WrapperMock)(nil).Set), arg0...)
}

// SetLevel mocks base method.
func (m *WrapperMock) SetLevel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLevel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLevel indicates an expected call of SetLevel.
func (mr *WrapperMockMockRecorder) SetLevel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*WrapperMock)(nil).SetLevel), arg0)
}

// SetLogger mocks base method.
func (m *WrapperMock) SetLogger(logger Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", logger)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *WrapperMockMockRecorder) SetLogger(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*WrapperMock)(nil).SetLogger), logger)
}

// Sugar mocks base method.
func (m *WrapperMock) Sugar() SugarLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sugar")
	ret0, _ := ret[0].(SugarLogger)
	return ret0
}

// Sugar indicates an expected call of Sugar.
func (mr *WrapperMockMockRecorder) Sugar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sugar", reflect.TypeOf((*WrapperMock)(nil).Sugar))
}

// Sync mocks base method.
func (m *WrapperMock) Sync() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sync")
}

// Sync indicates an expected call of Sync.
func (mr *WrapperMockMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*WrapperMock)(nil).Sync))
}

// Warn mocks base method.
func (m *WrapperMock) Warn(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *WrapperMockMockRecorder) Warn(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*WrapperMock)(nil).Warn), varargs...)
}

// Warnf mocks base method.
func (m *WrapperMock) Warnf(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *WrapperMockMockRecorder) Warnf(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*WrapperMock)(nil).Warnf), varargs...)
}

// With mocks base method.
func (m *WrapperMock) With(arg0 ...Field) Logger {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *WrapperMockMockRecorder) With(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*WrapperMock)(nil).With), arg0...)
}
