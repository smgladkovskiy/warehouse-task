// Code generated by MockGen. DO NOT EDIT.
// Source: hasher.go
//
// Generated by this command:
//
//	mockgen -source=hasher.go -destination=hasher_mock.go -package=passcrypto -mock_names PasswordHashable=PasswordHashMock
//

// Package passcrypto is a generated GoMock package.
package passcrypto

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// PasswordHashMock is a mock of PasswordHashable interface.
type PasswordHashMock struct {
	ctrl     *gomock.Controller
	recorder *PasswordHashMockMockRecorder
}

// PasswordHashMockMockRecorder is the mock recorder for PasswordHashMock.
type PasswordHashMockMockRecorder struct {
	mock *PasswordHashMock
}

// NewPasswordHashMock creates a new mock instance.
func NewPasswordHashMock(ctrl *gomock.Controller) *PasswordHashMock {
	mock := &PasswordHashMock{ctrl: ctrl}
	mock.recorder = &PasswordHashMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PasswordHashMock) EXPECT() *PasswordHashMockMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method.
func (m *PasswordHashMock) ComparePasswords(hashedPwd string, plainPwd []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", hashedPwd, plainPwd)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *PasswordHashMockMockRecorder) ComparePasswords(hashedPwd, plainPwd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*PasswordHashMock)(nil).ComparePasswords), hashedPwd, plainPwd)
}

// HashAndSalt mocks base method.
func (m *PasswordHashMock) HashAndSalt(pwd []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashAndSalt", pwd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashAndSalt indicates an expected call of HashAndSalt.
func (mr *PasswordHashMockMockRecorder) HashAndSalt(pwd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashAndSalt", reflect.TypeOf((*PasswordHashMock)(nil).HashAndSalt), pwd)
}
