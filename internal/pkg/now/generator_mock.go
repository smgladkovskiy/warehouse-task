// Code generated by MockGen. DO NOT EDIT.
// Source: generator.go
//
// Generated by this command:
//
//	mockgen -source=generator.go -destination=./generator_mock.go -package=now -mock_names Generatorable=Mock
//

// Package now is a generated GoMock package.
package now

import (
	"reflect"
	"time"

	"go.uber.org/mock/gomock"
)

// Mock is a mock of Generatorable interface.
type Mock struct {
	ctrl     *gomock.Controller
	recorder *MockMockRecorder
}

// MockMockRecorder is the mock recorder for Mock.
type MockMockRecorder struct {
	mock *Mock
}

// NewMock creates a new mock instance.
func NewMock(ctrl *gomock.Controller) *Mock {
	mock := &Mock{ctrl: ctrl}
	mock.recorder = &MockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock) EXPECT() *MockMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *Mock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*Mock)(nil).Now))
}

// NowP mocks base method.
func (m *Mock) NowP() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NowP")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// NowP indicates an expected call of NowP.
func (mr *MockMockRecorder) NowP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NowP", reflect.TypeOf((*Mock)(nil).NowP))
}
